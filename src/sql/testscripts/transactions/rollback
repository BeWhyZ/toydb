# Tests ROLLBACK.

> CREATE TABLE test (id INT PRIMARY KEY, value STRING)
---
ok

# A rollback removes the row, TxnActive record and its TxnWrite records.
[ops,result]> BEGIN
[ops,result]> INSERT INTO test VALUES (1, 'a'), (2, 'b')
[ops,result]> ROLLBACK
---
set mvcc:NextVersion → 3 ["\x00" → "\x03"]
set mvcc:TxnActive(2) → "" ["\x01\x00\x00\x00\x00\x00\x00\x00\x02" → ""]
Begin(TransactionState { version: 2, read_only: false, active: {} })
set mvcc:TxnWrite(2, sql:Row(test, 1)) → "" ["\x03\x00\x00\x00\x00\x00\x00\x00\x02\x02test\x00\xff\x00\xff\x02\x80\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x01\x00\x00" → ""]
set mvcc:Version(sql:Row(test, 1), 2) → 1,'a' ["\x04\x02test\x00\xff\x00\xff\x02\x80\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02" → "\x01\x06\x02\x02\x02\x04\x01a"]
set mvcc:TxnWrite(2, sql:Row(test, 2)) → "" ["\x03\x00\x00\x00\x00\x00\x00\x00\x02\x02test\x00\xff\x00\xff\x02\x80\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x02\x00\x00" → ""]
set mvcc:Version(sql:Row(test, 2), 2) → 2,'b' ["\x04\x02test\x00\xff\x00\xff\x02\x80\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02" → "\x01\x06\x02\x02\x04\x04\x01b"]
Insert { count: 2 }
delete mvcc:Version(sql:Row(test, 1), 2) ["\x04\x02test\x00\xff\x00\xff\x02\x80\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02"]
delete mvcc:TxnWrite(2, sql:Row(test, 1)) ["\x03\x00\x00\x00\x00\x00\x00\x00\x02\x02test\x00\xff\x00\xff\x02\x80\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x01\x00\x00"]
delete mvcc:Version(sql:Row(test, 2), 2) ["\x04\x02test\x00\xff\x00\xff\x02\x80\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02"]
delete mvcc:TxnWrite(2, sql:Row(test, 2)) ["\x03\x00\x00\x00\x00\x00\x00\x00\x02\x02test\x00\xff\x00\xff\x02\x80\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x02\x00\x00"]
delete mvcc:TxnActive(2) ["\x01\x00\x00\x00\x00\x00\x00\x00\x02"]
Rollback { version: 2 }

# A later transaction can't see its writes.
c1:> SELECT * FROM test
---
ok

# If there are concurrent transactions, it does not remove the
# TxnActiveSnapshot. This is needed for consistent AS OF queries.
c1:> BEGIN
---
ok

c2:[ops,result]> BEGIN
c2:[ops,result]> ROLLBACK
---
c2: set mvcc:NextVersion → 5 ["\x00" → "\x05"]
c2: set mvcc:TxnActiveSnapshot(4) → {3} ["\x02\x00\x00\x00\x00\x00\x00\x00\x04" → "\x01\x03"]
c2: set mvcc:TxnActive(4) → "" ["\x01\x00\x00\x00\x00\x00\x00\x00\x04" → ""]
c2: Begin(TransactionState { version: 4, read_only: false, active: {3} })
c2: delete mvcc:TxnActive(4) ["\x01\x00\x00\x00\x00\x00\x00\x00\x04"]
c2: Rollback { version: 4 }

# Rollback errors when there's no open transaction.
!> ROLLBACK
---
Error: invalid input: not in a transaction
