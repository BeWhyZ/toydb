# Tests BEGIN.

> CREATE TABLE test (id INT PRIMARY KEY, value STRING)
> INSERT INTO test VALUES (0, '')
---
ok

# BEGIN starts a new transaction. It bumps NextVersion and writes a TxnActive
# record for itself.
c1:[result,ops]> BEGIN
---
c1: set mvcc:NextVersion → 4 ["\x00" → "\x04"]
c1: set mvcc:TxnActive(3) → "" ["\x01\x00\x00\x00\x00\x00\x00\x00\x03" → ""]
c1: Begin(TransactionState { version: 3, read_only: false, active: {} })

# Starting another transaction for c1 errors.
c1:!> BEGIN
c1:!> BEGIN READ ONLY
---
c1: Error: invalid input: already in a transaction
c1: Error: invalid input: already in a transaction

# Another client can begin a concurrent transaction, capturing c1's version in
# its active set. The active snapshot is persisted to storage.
c2:[result,ops]> BEGIN
---
c2: set mvcc:NextVersion → 5 ["\x00" → "\x05"]
c2: set mvcc:TxnActiveSnapshot(4) → {3} ["\x02\x00\x00\x00\x00\x00\x00\x00\x04" → "\x01\x03"]
c2: set mvcc:TxnActive(4) → "" ["\x01\x00\x00\x00\x00\x00\x00\x00\x04" → ""]
c2: Begin(TransactionState { version: 4, read_only: false, active: {3} })

# A read-only transaction doesn't allocate a new version, and doesn't perform
# any storage engine writes. It does capture an active set though, and it can't
# perform any writes.
c3:[result,ops]> BEGIN READ ONLY
c3:!> INSERT INTO test VALUES (0, '')
c3:> ROLLBACK
---
c3: Begin(TransactionState { version: 5, read_only: true, active: {3, 4} })
c3: Error: invalid input: primary key 0 already exists

# c1 writes a value and commits.
c1:> INSERT INTO test VALUES (1, 'a')
c1:> COMMIT
---
ok

# A transaction as of version 1 doesn't see anything, since the
# table was created in this version.
c3:[result,ops]> BEGIN READ ONLY AS OF SYSTEM TIME 1
c3:!> SELECT * FROM test
c3:> ROLLBACK
---
c3: Begin(TransactionState { version: 1, read_only: true, active: {} })
c3: Error: invalid input: table test does not exist

# It sees the table at version 2, but no rows. The row is visible
# at version 3, but not c1's write which was committed at the end
# of version 3.
c3:[result,ops]> BEGIN READ ONLY AS OF SYSTEM TIME 2
c3:> SELECT * FROM test
c3:> ROLLBACK
---
c3: Begin(TransactionState { version: 2, read_only: true, active: {} })

c3:[result,ops]> BEGIN READ ONLY AS OF SYSTEM TIME 3
c3:> SELECT * FROM test
c3:> ROLLBACK
---
c3: Begin(TransactionState { version: 3, read_only: true, active: {} })
c3: 0, ''

# At version 4, we inherit c2's active set which excludes c1, and still can't
# see c1's write.
c3:[result,ops]> BEGIN READ ONLY AS OF SYSTEM TIME 4
c3:> SELECT * FROM test
c3:> ROLLBACK
---
c3: Begin(TransactionState { version: 4, read_only: true, active: {3} })
c3: 0, ''
