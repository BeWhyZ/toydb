# Tests the switch to hash joins where appropriate.

> CREATE TABLE test (id INT PRIMARY KEY, value STRING)
> INSERT INTO test VALUES (1, 'a'), (2, 'b'), (3, 'c')
---
ok

# Equijoins are converted to hash joins.
[opt]> SELECT * FROM test a JOIN test b ON a.id = b.id
---
Initial:
   NestedLoopJoin: inner on a.id = b.id
   ├─ Scan: test as a
   └─ Scan: test as b
Join type:
   HashJoin: inner on a.id = b.id
   ├─ Scan: test as a
   └─ Scan: test as b
1, 'a', 1, 'a'
2, 'b', 2, 'b'
3, 'c', 3, 'c'

# This also works for non-primary key columns.
[opt]> SELECT * FROM test a JOIN test b ON a.value = b.value
---
Initial:
   NestedLoopJoin: inner on a.value = b.value
   ├─ Scan: test as a
   └─ Scan: test as b
Join type:
   HashJoin: inner on a.value = b.value
   ├─ Scan: test as a
   └─ Scan: test as b
1, 'a', 1, 'a'
2, 'b', 2, 'b'
3, 'c', 3, 'c'

# However, it does not work with both.
[opt]> SELECT * FROM test a JOIN test b ON a.id = b.id AND a.value = b.value 
---
Initial:
   NestedLoopJoin: inner on a.id = b.id AND a.value = b.value
   ├─ Scan: test as a
   └─ Scan: test as b
1, 'a', 1, 'a'
2, 'b', 2, 'b'
3, 'c', 3, 'c'

# It does not work with other predicates either. A smarter optimizer could
# move the rest of the predicate into a new filter node.
[opt]> SELECT * FROM test a JOIN test b ON a.id = b.id AND a.value >= b.value
---
Initial:
   NestedLoopJoin: inner on a.id = b.id AND (a.value > b.value OR a.value = b.value)
   ├─ Scan: test as a
   └─ Scan: test as b
1, 'a', 1, 'a'
2, 'b', 2, 'b'
3, 'c', 3, 'c'

# However, the filter pushdown optimizer can save the day by pushing down
# independent predicates into the scans.
[opt]> SELECT * FROM test a JOIN test b ON a.id = b.id AND a.value = 'b' AND b.value = 'c'
---
Initial:
   NestedLoopJoin: inner on a.id = b.id AND a.value = 'b' AND b.value = 'c'
   ├─ Scan: test as a
   └─ Scan: test as b
Filter pushdown:
   NestedLoopJoin: inner on a.id = b.id
   ├─ Scan: test as a (a.value = 'b')
   └─ Scan: test as b (b.value = 'c')
Join type:
   HashJoin: inner on a.id = b.id
   ├─ Scan: test as a (a.value = 'b')
   └─ Scan: test as b (b.value = 'c')
