# Tests ORDER BY clauses.

# Create a table with representative values of all types.
> CREATE TABLE test ( \
    id INT PRIMARY KEY, \
    "bool" BOOLEAN, \
    "int" INTEGER, \
    "float" FLOAT, \
    "string" STRING, \
    static INT \
)
> INSERT INTO test VALUES (0, NULL,  NULL,  NULL,      NULL,  1)
> INSERT INTO test VALUES (1, TRUE,  0,     3.14,      'a',   1)
> INSERT INTO test VALUES (2, FALSE, -1,    -2.718,    'ab',  1)
> INSERT INTO test VALUES (3, NULL,  1,     0.0,       'aaa', 1)
> INSERT INTO test VALUES (4, NULL,  1000,  -0.0,      'A',   1)
> INSERT INTO test VALUES (5, NULL,  -1000, INFINITY,  '',    1)
> INSERT INTO test VALUES (6, NULL,  7,     -INFINITY, 'åa',  1)
> INSERT INTO test VALUES (7, NULL,  -9,    NAN,       'Åa',  1)
> INSERT INTO test VALUES (8, NULL,  NULL,  NULL,      'B',   1)
> INSERT INTO test VALUES (9, NULL,  NULL,  NULL,      '👍',  1)

> CREATE TABLE other (id INT PRIMARY KEY, value STRING)
> INSERT INTO other VALUES (1, 'a'), (2, 'b')
---
ok

# Order by constant values. There's only one row, but it should be valid.
[plan]> SELECT 1 AS value ORDER BY value ASC
---
Order: value asc
└─ Projection: 1 as value
   └─ Values: blank row
1

[plan]> SELECT 1 AS value ORDER BY value DESC
---
Order: value desc
└─ Projection: 1 as value
   └─ Values: blank row
1

# Order by primary key.
[plan]> SELECT * FROM test ORDER BY id ASC
---
Order: test.id asc
└─ Scan: test
0, NULL, NULL, NULL, NULL, 1
1, TRUE, 0, 3.14, 'a', 1
2, FALSE, -1, -2.718, 'ab', 1
3, NULL, 1, 0.0, 'aaa', 1
4, NULL, 1000, 0.0, 'A', 1
5, NULL, -1000, inf, '', 1
6, NULL, 7, -inf, 'åa', 1
7, NULL, -9, NaN, 'Åa', 1
8, NULL, NULL, NULL, 'B', 1
9, NULL, NULL, NULL, '👍', 1

[plan]> SELECT * FROM test ORDER BY id DESC
---
Order: test.id desc
└─ Scan: test
9, NULL, NULL, NULL, '👍', 1
8, NULL, NULL, NULL, 'B', 1
7, NULL, -9, NaN, 'Åa', 1
6, NULL, 7, -inf, 'åa', 1
5, NULL, -1000, inf, '', 1
4, NULL, 1000, 0.0, 'A', 1
3, NULL, 1, 0.0, 'aaa', 1
2, FALSE, -1, -2.718, 'ab', 1
1, TRUE, 0, 3.14, 'a', 1
0, NULL, NULL, NULL, NULL, 1

# Booleans.
> SELECT id, "bool" FROM test ORDER BY "bool" ASC
---
0, NULL
3, NULL
4, NULL
5, NULL
6, NULL
7, NULL
8, NULL
9, NULL
2, FALSE
1, TRUE

> SELECT id, "bool" FROM test ORDER BY "bool" DESC
---
1, TRUE
2, FALSE
0, NULL
3, NULL
4, NULL
5, NULL
6, NULL
7, NULL
8, NULL
9, NULL

# Integers.
> SELECT id, "int" FROM test ORDER BY "int" ASC
---
0, NULL
8, NULL
9, NULL
5, -1000
7, -9
2, -1
1, 0
3, 1
6, 7
4, 1000

> SELECT id, "int" FROM test ORDER BY "int" DESC
---
4, 1000
6, 7
3, 1
1, 0
2, -1
7, -9
5, -1000
0, NULL
8, NULL
9, NULL

# Floats.
> SELECT id, "float" FROM test ORDER BY "float" ASC
---
0, NULL
8, NULL
9, NULL
6, -inf
2, -2.718
3, 0.0
4, 0.0
1, 3.14
5, inf
7, NaN

> SELECT id, "float" FROM test ORDER BY "float" DESC
---
7, NaN
5, inf
1, 3.14
3, 0.0
4, 0.0
2, -2.718
6, -inf
0, NULL
8, NULL
9, NULL

# Strings.
> SELECT id, "string" FROM test ORDER BY "string" ASC
---
0, NULL
5, ''
4, 'A'
8, 'B'
1, 'a'
3, 'aaa'
2, 'ab'
7, 'Åa'
6, 'åa'
9, '👍'

> SELECT id, "string" FROM test ORDER BY "string" DESC
---
9, '👍'
6, 'åa'
7, 'Åa'
2, 'ab'
3, 'aaa'
1, 'a'
8, 'B'
4, 'A'
5, ''
0, NULL

# When all values are equal, they are stably ordered by the primary key in
# ascending order (the scan order).
> SELECT id, static FROM test ORDER BY static ASC
---
0, 1
1, 1
2, 1
3, 1
4, 1
5, 1
6, 1
7, 1
8, 1
9, 1


> SELECT id, static FROM test ORDER BY static DESC
---
0, 1
1, 1
2, 1
3, 1
4, 1
5, 1
6, 1
7, 1
8, 1
9, 1

# Order by multiple columns. Again, the ascending primary key is tiebreaker.
> SELECT id, static, "bool", "int", "string" FROM test \
  ORDER BY static ASC, "bool" DESC, "int" ASC, "string" DESC
---
1, 1, TRUE, 0, 'a'
2, 1, FALSE, -1, 'ab'
9, 1, NULL, NULL, '👍'
8, 1, NULL, NULL, 'B'
0, 1, NULL, NULL, NULL
5, 1, NULL, -1000, ''
7, 1, NULL, -9, 'Åa'
3, 1, NULL, 1, 'aaa'
6, 1, NULL, 7, 'åa'
4, 1, NULL, 1000, 'A'

> SELECT id, static, "bool", "int", "string" FROM test \
  ORDER BY static DESC, "bool" ASC, "int" DESC, "string" ASC
---
4, 1, NULL, 1000, 'A'
6, 1, NULL, 7, 'åa'
3, 1, NULL, 1, 'aaa'
7, 1, NULL, -9, 'Åa'
5, 1, NULL, -1000, ''
0, 1, NULL, NULL, NULL
8, 1, NULL, NULL, 'B'
9, 1, NULL, NULL, '👍'
2, 1, FALSE, -1, 'ab'
1, 1, TRUE, 0, 'a'

# Can order by expressions.
[plan]> SELECT id, "float" FROM test ORDER BY "float" ^ 2
---
Order: test.float ^ 2 asc
└─ Projection: test.id, test.float
   └─ Scan: test
0, NULL
8, NULL
9, NULL
3, 0.0
4, 0.0
2, -2.718
1, 3.14
5, inf
6, -inf
7, NaN

# Can order by columns not in the result. Multiple references to the same column
# only result in one hidden column.
[plan]> SELECT id, "int" FROM test ORDER BY "bool" DESC
---
Remap: test.id, test.int (dropped: test.bool)
└─ Order: test.bool desc
   └─ Projection: test.id, test.int, test.bool
      └─ Scan: test
1, 0
2, -1
0, NULL
3, 1
4, 1000
5, -1000
6, 7
7, -9
8, NULL
9, NULL

[plan]> SELECT id, "int" FROM test ORDER BY "bool" DESC, "bool" ASC
---
Remap: test.id, test.int (dropped: test.bool)
└─ Order: test.bool desc, test.bool asc
   └─ Projection: test.id, test.int, test.bool
      └─ Scan: test
1, 0
2, -1
0, NULL
3, 1
4, 1000
5, -1000
6, 7
7, -9
8, NULL
9, NULL

# Can order on expressions on columns not in the result.
[plan]> SELECT id FROM test ORDER BY "float" ^ 2 - "int" ^ 2 DESC
---
Remap: test.id (dropped: test.float, test.int)
└─ Order: test.float ^ 2 - test.int ^ 2 desc
   └─ Projection: test.id, test.float, test.int
      └─ Scan: test
7
5
6
1
2
3
4
0
8
9

# Order by aliased table or column.
> SELECT id, "int" AS foo FROM test ORDER BY foo
---
0, NULL
8, NULL
9, NULL
5, -1000
7, -9
2, -1
1, 0
3, 1
6, 7
4, 1000

> SELECT id, "int" FROM test AS t ORDER BY t."int"
---
0, NULL
8, NULL
9, NULL
5, -1000
7, -9
2, -1
1, 0
3, 1
6, 7
4, 1000

# Order by an aliased expression.
> SELECT id, "int" ^ 2 AS square FROM test ORDER BY square ASC
---
0, NULL
8, NULL
9, NULL
1, 0
2, 1
3, 1
6, 49
7, 81
4, 1000000
5, 1000000

# Errors if the column is ambiguous.
!> SELECT id, "int" ^ 2 AS foo, "int" AS foo FROM test ORDER BY foo ASC
---
Error: invalid input: ambiguous column foo

# Prefers alias over table column if ambiguous, but not if fully qualified.
[plan]> SELECT id AS "int" FROM test ORDER BY "int" DESC
---
Order: int desc
└─ Projection: test.id as int
   └─ Scan: test
9
8
7
6
5
4
3
2
1
0

[plan]> SELECT id AS "int" FROM test ORDER BY test."int" DESC
---
Remap: int (dropped: test.int)
└─ Order: test.int desc
   └─ Projection: test.id as int, test.int
      └─ Scan: test
4
6
3
1
2
7
5
0
8
9

# Errors on unknown table or column, even the original table name when aliased.
!> SELECT * FROM test ORDER BY unknown
!> SELECT * FROM test ORDER BY test.unknown
!> SELECT * FROM test ORDER BY unknown.id
!> SELECT * FROM test AS t ORDER BY test."int"
---
Error: invalid input: unknown column unknown
Error: invalid input: unknown column test.unknown
Error: invalid input: unknown table unknown
Error: invalid input: unknown table test

# Errors on unknown direction.
!> SELECT * FROM test ORDER BY id UNKNOWN
---
Error: invalid input: unexpected token unknown

# Errors on trailing comma.
!> SELECT * FROM test ORDER BY id,
---
Error: invalid input: unexpected end of input

# Errors on ambiguous columns.
!> SELECT * FROM test, other ORDER BY id DESC
---
Error: invalid input: ambiguous column id

# Works with qualified columns, even when aliased.
[plan]> SELECT * FROM test, other ORDER BY other.id DESC
---
Order: other.id desc
└─ NestedLoopJoin: inner
   ├─ Scan: test
   └─ Scan: other
0, NULL, NULL, NULL, NULL, 1, 2, 'b'
1, TRUE, 0, 3.14, 'a', 1, 2, 'b'
2, FALSE, -1, -2.718, 'ab', 1, 2, 'b'
3, NULL, 1, 0.0, 'aaa', 1, 2, 'b'
4, NULL, 1000, 0.0, 'A', 1, 2, 'b'
5, NULL, -1000, inf, '', 1, 2, 'b'
6, NULL, 7, -inf, 'åa', 1, 2, 'b'
7, NULL, -9, NaN, 'Åa', 1, 2, 'b'
8, NULL, NULL, NULL, 'B', 1, 2, 'b'
9, NULL, NULL, NULL, '👍', 1, 2, 'b'
0, NULL, NULL, NULL, NULL, 1, 1, 'a'
1, TRUE, 0, 3.14, 'a', 1, 1, 'a'
2, FALSE, -1, -2.718, 'ab', 1, 1, 'a'
3, NULL, 1, 0.0, 'aaa', 1, 1, 'a'
4, NULL, 1000, 0.0, 'A', 1, 1, 'a'
5, NULL, -1000, inf, '', 1, 1, 'a'
6, NULL, 7, -inf, 'åa', 1, 1, 'a'
7, NULL, -9, NaN, 'Åa', 1, 1, 'a'
8, NULL, NULL, NULL, 'B', 1, 1, 'a'
9, NULL, NULL, NULL, '👍', 1, 1, 'a'

[plan]> SELECT * FROM test t, other o ORDER BY o.id DESC, t.id ASC
---
Order: o.id desc, t.id asc
└─ NestedLoopJoin: inner
   ├─ Scan: test as t
   └─ Scan: other as o
0, NULL, NULL, NULL, NULL, 1, 2, 'b'
1, TRUE, 0, 3.14, 'a', 1, 2, 'b'
2, FALSE, -1, -2.718, 'ab', 1, 2, 'b'
3, NULL, 1, 0.0, 'aaa', 1, 2, 'b'
4, NULL, 1000, 0.0, 'A', 1, 2, 'b'
5, NULL, -1000, inf, '', 1, 2, 'b'
6, NULL, 7, -inf, 'åa', 1, 2, 'b'
7, NULL, -9, NaN, 'Åa', 1, 2, 'b'
8, NULL, NULL, NULL, 'B', 1, 2, 'b'
9, NULL, NULL, NULL, '👍', 1, 2, 'b'
0, NULL, NULL, NULL, NULL, 1, 1, 'a'
1, TRUE, 0, 3.14, 'a', 1, 1, 'a'
2, FALSE, -1, -2.718, 'ab', 1, 1, 'a'
3, NULL, 1, 0.0, 'aaa', 1, 1, 'a'
4, NULL, 1000, 0.0, 'A', 1, 1, 'a'
5, NULL, -1000, inf, '', 1, 1, 'a'
6, NULL, 7, -inf, 'åa', 1, 1, 'a'
7, NULL, -9, NaN, 'Åa', 1, 1, 'a'
8, NULL, NULL, NULL, 'B', 1, 1, 'a'
9, NULL, NULL, NULL, '👍', 1, 1, 'a'

# Order by aggregates, both when in SELECT and otherwise.
[plan]> SELECT "bool", MAX("int") FROM test GROUP BY "bool" ORDER BY MAX("int") DESC
---
Order: #1 desc
└─ Aggregate: test.bool, max(test.int)
   └─ Scan: test
NULL, 1000
TRUE, 0
FALSE, -1

[plan]> SELECT "bool" FROM test GROUP BY "bool" ORDER BY MAX("int") DESC
---
Remap: test.bool (dropped: #1)
└─ Order: #1 desc
   └─ Aggregate: test.bool, max(test.int)
      └─ Scan: test
NULL
TRUE
FALSE

[plan]> SELECT "bool", MAX("int") FROM test GROUP BY "bool" ORDER BY MAX("int") - MIN("int") DESC
---
Remap: test.bool, #1 (dropped: #2)
└─ Order: #1 - #2 desc
   └─ Aggregate: test.bool, max(test.int), min(test.int)
      └─ Scan: test
NULL, 1000
FALSE, -1
TRUE, 0

# ORDER BY works with compound expressions using complex GROUP BY expressions
# that are not on the SELECT clause.
[plan]> SELECT COUNT(*) FROM test GROUP BY id % 2 ORDER BY 2 - id % 2 + 1 > 1
---
Remap: #0 (dropped: #1)
└─ Order: 2 - #1 + 1 > 1 asc
   └─ Projection: #1, #0
      └─ Aggregate: test.id % 2, count(TRUE)
         └─ Scan: test
5
5

# ORDER BY can use (un)qualified expressions for an (un)qualified GROUP BY.
[plan]> SELECT COUNT(*) FROM test GROUP BY "bool" ORDER BY test."bool"
---
Remap: #0 (dropped: test.bool)
└─ Order: test.bool asc
   └─ Projection: #1, test.bool
      └─ Aggregate: test.bool, count(TRUE)
         └─ Scan: test
8
1
1

[plan]> SELECT COUNT(*) FROM test GROUP BY test."bool" ORDER BY "bool"
---
Remap: #0 (dropped: test.bool)
└─ Order: test.bool asc
   └─ Projection: #1, test.bool
      └─ Aggregate: test.bool, count(TRUE)
         └─ Scan: test
8
1
1

# ORDER BY errors on columns not in the SELECT or GROUP BY clauses.
!> SELECT "bool", COUNT(*) FROM test GROUP BY "bool" ORDER BY id
---
Error: invalid input: column id must be used in an aggregate or GROUP BY expression
