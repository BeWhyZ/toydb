# Tests HAVING clauses. See "aggregate" and "group_by" for related tests.

> CREATE TABLE test ( \
    id INT PRIMARY KEY, \
    "group" STRING, \
    "bool" BOOLEAN, \
    "int" INTEGER, \
    "float" FLOAT, \
    "string" STRING \
)
> INSERT INTO test VALUES (0, NULL,   NULL, NULL,   NULL,      NULL)
> INSERT INTO test VALUES (1, 'a',    TRUE,   -1,   3.14,      '')
> INSERT INTO test VALUES (2, 'b',    FALSE,  0,    NAN,       'abc')
> INSERT INTO test VALUES (3, 'a',    TRUE,   3,    -0.0,      'AB')
> INSERT INTO test VALUES (4, 'b',    TRUE,   42,   INFINITY,  'ðŸ‘‹')
> INSERT INTO test VALUES (5, 'a',    FALSE,  7,    NAN,       '')
> INSERT INTO test VALUES (6, 'b',    FALSE,  -1,   0.0,       'abc')
---
ok

# Having requires an aggregate function or GROUP BY clause.
!> SELECT * FROM test HAVING id > 3
---
Error: invalid input: HAVING requires GROUP BY or aggregate function

> SELECT COUNT(*) FROM test HAVING COUNT(*) > 0
---
7

> SELECT TRUE FROM test GROUP BY id HAVING id > 0
---
TRUE
TRUE
TRUE
TRUE
TRUE
TRUE

# Having works with an aggregate function, even if it's not in SELECT.
[plan]> SELECT "group", MAX("int") FROM test GROUP BY "group" HAVING MAX("int") > 10
---
Filter: #1 > 10
â””â”€ Aggregate: test.group, max(test.int)
   â””â”€ Scan: test
'b', 42

[plan]> SELECT "group" FROM test GROUP BY "group" HAVING MAX("int") > 10
---
Remap: test.group (dropped: #1)
â””â”€ Filter: #1 > 10
   â””â”€ Aggregate: test.group, max(test.int)
      â””â”€ Scan: test
'b'

[plan]> SELECT "group", MAX("int") FROM test GROUP BY "group" HAVING MAX("int") - MIN("int") > 10
---
Remap: test.group, #1 (dropped: #2)
â””â”€ Filter: #1 - #2 > 10
   â””â”€ Aggregate: test.group, max(test.int), min(test.int)
      â””â”€ Scan: test
'b', 42

# Having works with SELECT aliases.
[plan]> SELECT "group", MAX("int") AS m FROM test GROUP BY "group" HAVING m > 10
---
Filter: m > 10
â””â”€ Projection: test.group, #1 as m
   â””â”€ Aggregate: test.group, max(test.int)
      â””â”€ Scan: test
'b', 42

# Having works with an aggregate function not in the SELECT clause.
[plan]> SELECT "group", COUNT(*) FROM test GROUP BY "group" HAVING MAX("int") > 10
---
Remap: test.group, #1 (dropped: #2)
â””â”€ Filter: #2 > 10
   â””â”€ Aggregate: test.group, count(TRUE), max(test.int)
      â””â”€ Scan: test
'b', 3

# Having works with compound expressions.
[plan]> SELECT "group", COUNT(*) FROM test GROUP BY "group" HAVING MAX("int") / COUNT(*) > 3
---
Remap: test.group, #1 (dropped: #2)
â””â”€ Filter: #2 / #1 > 3
   â””â”€ Aggregate: test.group, count(TRUE), max(test.int)
      â””â”€ Scan: test
'b', 3

# Having works with compound expressions using complex GROUP BY expressions
# that are not on the SELECT clause.
[plan]> SELECT COUNT(*) FROM test GROUP BY id % 2 HAVING 2 - id % 2 + 1 > 1
---
Remap: #0 (dropped: #1)
â””â”€ Filter: 2 - #1 + 1 > 1
   â””â”€ Projection: #1, #0
      â””â”€ Aggregate: test.id % 2, count(TRUE)
         â””â”€ Scan: test
4
3

# Having can use (un)qualified expressions for an (un)qualified GROUP BY.
[plan]> SELECT COUNT(*) FROM test GROUP BY "group" HAVING test."group" = 'a'
---
Remap: #0 (dropped: test.group)
â””â”€ Filter: test.group = 'a'
   â””â”€ Projection: #1, test.group
      â””â”€ Aggregate: test.group, count(TRUE)
         â””â”€ Scan: test
3

[plan]> SELECT COUNT(*) FROM test GROUP BY test."group" HAVING "group" = 'a'
---
Remap: #0 (dropped: test.group)
â””â”€ Filter: test.group = 'a'
   â””â”€ Projection: #1, test.group
      â””â”€ Aggregate: test.group, count(TRUE)
         â””â”€ Scan: test
3

# Having errors on nested aggregate functions.
!> SELECT "group", COUNT(*) FROM test GROUP BY "group" HAVING MAX(MIN("int")) > 0
---
Error: invalid input: aggregate functions can't be nested

# Having errors on columns not in the SELECT or GROUP BY clauses.
!> SELECT "group", COUNT(*) FROM test GROUP BY "group" HAVING id > 3
---
Error: invalid input: column id must be used in an aggregate or GROUP BY expression
