# Tests aggregate functions.

> CREATE TABLE test ( \
    id INT PRIMARY KEY, \
    "bool" BOOLEAN, \
    "int" INTEGER, \
    "float" FLOAT, \
    "string" STRING \
)
> INSERT INTO test VALUES (0, NULL, NULL,   NULL,      NULL)
> INSERT INTO test VALUES (1, TRUE,   -1,   3.14,      '')
> INSERT INTO test VALUES (2, FALSE,  0,    2.718,     'abc')
> INSERT INTO test VALUES (3, TRUE,   3,    -0.0,      'AB')
> INSERT INTO test VALUES (4, NULL,   42,   INFINITY,  'ðŸ‘‹')
> INSERT INTO test VALUES (5, NULL,   NULL, NAN,       NULL)
---
ok

# COUNT(*) returns the row count.
[plan]> SELECT COUNT(*) FROM test
---
Aggregate: count(TRUE)
â””â”€ Scan: test
6

# COUNT works on constant values.
[plan,header]> SELECT COUNT(NULL), COUNT(TRUE), COUNT(1), COUNT(3.14), COUNT(NAN), COUNT('')
---
Aggregate: count(NULL), count(TRUE), count(1), count(3.14), count(NaN), count('')
â””â”€ Values: blank row
, , , , , 
0, 1, 1, 1, 1, 1

# COUNT works on no rows.
[plan]> SELECT COUNT(id), COUNT("bool"), COUNT("float"), COUNT("string") FROM test WHERE false
---
Aggregate: count(test.id), count(test.bool), count(test.float), count(test.string)
â””â”€ Nothing
0, 0, 0, 0

# COUNT returns number of non-NULL values.
[plan,header]> SELECT COUNT(id), COUNT("bool"), COUNT("float"), COUNT("string") FROM test
---
Aggregate: count(test.id), count(test.bool), count(test.float), count(test.string)
â””â”€ Scan: test
, , , 
6, 3, 5, 4

# MAX works on constant values.
[plan]> SELECT MAX(NULL), MAX(TRUE), MAX(1), MAX(3.14), MAX(NAN), MAX('foo') FROM test
---
Aggregate: max(NULL), max(TRUE), max(1), max(3.14), max(NaN), max('foo')
â””â”€ Scan: test
NULL, TRUE, 1, 3.14, NaN, 'foo'

# MAX works on no rows.
[plan]> SELECT MAX(id), MAX("bool"), MAX("float"), MAX("string") FROM test WHERE false
---
Aggregate: max(test.id), max(test.bool), max(test.float), max(test.string)
â””â”€ Nothing
NULL, NULL, NULL, NULL

# MAX returns the max value, or NULL if any value is NULL.
[plan]> SELECT MAX(id) FROM test
---
Aggregate: max(test.id)
â””â”€ Scan: test
5

> SELECT MAX("bool") FROM test
---
TRUE

> SELECT MAX("int") FROM test
---
42

> SELECT MAX("float") FROM test
> SELECT MAX("float") FROM test WHERE "float" IS NOT NAN
---
NaN
inf

> SELECT MAX("string") FROM test
---
'ðŸ‘‹'

# MIN works on constant values.
[plan]> SELECT MIN(NULL), MIN(TRUE), MIN(1), MIN(3.14), MIN(NAN), MIN('foo') FROM test
---
Aggregate: min(NULL), min(TRUE), min(1), min(3.14), min(NaN), min('foo')
â””â”€ Scan: test
NULL, TRUE, 1, 3.14, NaN, 'foo'

# MIN works on no rows.
[plan]> SELECT MIN(id), MIN("bool"), MIN("float"), MIN("string") FROM test WHERE false
---
Aggregate: min(test.id), min(test.bool), min(test.float), min(test.string)
â””â”€ Nothing
NULL, NULL, NULL, NULL

# MIN returns the min value, or NULL if any value is NULL.
[plan]> SELECT MIN(id) FROM test
---
Aggregate: min(test.id)
â””â”€ Scan: test
0

> SELECT MIN("bool") FROM test
---
FALSE

> SELECT MIN("int") FROM test
---
-1

> SELECT MIN("float") FROM test
---
0.0

> SELECT MIN("string") FROM test
---
''

# SUM works on constant values, but only numbers.
[plan]> SELECT SUM(NULL), SUM(1), SUM(3.14), SUM(NAN) FROM test
---
Aggregate: sum(NULL), sum(1), sum(3.14), sum(NaN)
â””â”€ Scan: test
NULL, 6, 18.84, NaN

!> SELECT SUM(TRUE)
!> SELECT SUM('foo')
---
Error: invalid input: can't add 0 and TRUE
Error: invalid input: can't add 0 and 'foo'

# SUM works on no rows.
[plan]> SELECT SUM(id), SUM("bool"), SUM("float"), SUM("string") FROM test WHERE false
---
Aggregate: sum(test.id), sum(test.bool), sum(test.float), sum(test.string)
â””â”€ Nothing
NULL, NULL, NULL, NULL

# SUM returns the sum, or NULL if any value is NULL. Errors
# on booleans or strings.
[plan]> SELECT SUM(id) FROM test
---
Aggregate: sum(test.id)
â””â”€ Scan: test
15

!> SELECT SUM("bool") FROM test
---
Error: invalid input: can't add 0 and TRUE

> SELECT SUM("int") FROM test
---
44

> SELECT SUM("float") FROM test
> SELECT SUM("float") FROM test WHERE "float" IS NOT NAN
---
NaN
inf

!> SELECT SUM("string") FROM test
---
Error: invalid input: can't add 0 and ''

# AVG works on constant values, but only numbers.
[plan]> SELECT AVG(NULL), AVG(1), AVG(3.14), AVG(NAN) FROM test
---
Aggregate: avg(NULL), avg(1), avg(3.14), avg(NaN)
â””â”€ Scan: test
NULL, 1, 3.14, NaN

!> SELECT AVG(TRUE)
!> SELECT AVG('foo')
---
Error: invalid input: can't add 0 and TRUE
Error: invalid input: can't add 0 and 'foo'

# AVG works on no rows.
[plan]> SELECT AVG(id), AVG("bool"), AVG("float"), AVG("string") FROM test WHERE false
---
Aggregate: avg(test.id), avg(test.bool), avg(test.float), avg(test.string)
â””â”€ Nothing
NULL, NULL, NULL, NULL

# AVG returns the average, or NULL if any value is NULL. Errors
# on booleans or strings.
[plan]> SELECT AVG(id) FROM test
---
Aggregate: avg(test.id)
â””â”€ Scan: test
2

!> SELECT AVG("bool") FROM test
---
Error: invalid input: can't add 0 and TRUE

> SELECT AVG("int") FROM test
---
11

> SELECT AVG("float") FROM test
> SELECT AVG("float") FROM test WHERE "float" IS NOT NAN
---
NaN
inf

!> SELECT AVG("string") FROM test
---
Error: invalid input: can't add 0 and ''

# Constant aggregates can be used with rows.
[plan]> SELECT COUNT(1), MIN(1), MAX(1), SUM(1), AVG(1) FROM test
---
Aggregate: count(1), min(1), max(1), sum(1), avg(1)
â””â”€ Scan: test
6, 1, 1, 6, 1

# Constant aggregates can't be used with value rows.
!> SELECT *, COUNT(1), MIN(1), MAX(1), SUM(1), AVG(1) FROM test
!> SELECT id, COUNT(1), MIN(1), MAX(1), SUM(1), AVG(1) FROM test
---
Error: invalid input: column test.id must be used in an aggregate or GROUP BY expression
Error: invalid input: column id must be used in an aggregate or GROUP BY expression

# Repeated aggregates work.
[plan]> SELECT MAX("int"), MAX("int"), MAX("int") FROM test
---
Projection: #0, #0, #0
â””â”€ Aggregate: max(test.int)
   â””â”€ Scan: test
42, 42, 42

# Aggregate can be expression, both inside and outside the aggregate.
[plan]> SELECT SUM("int" * 10) / COUNT("int") + 7 FROM test WHERE "int" IS NOT NULL
---
Projection: #0 / #1 + 7
â””â”€ Aggregate: sum(test.int * 10), count(test.int)
   â””â”€ Scan: test (NOT test.int IS NULL)
117

# Aggregate functions can't be nested.
!> SELECT MIN(MAX("int")) FROM test
---
Error: invalid input: aggregate functions can't be nested

# Can't mix aggregate and non-aggregate expressions.
!> SELECT MAX("int") - "int" FROM test
---
Error: invalid input: column int must be used in an aggregate or GROUP BY expression
