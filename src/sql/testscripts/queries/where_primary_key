# Tests WHERE index lookups.

# Boolean lookups.
> CREATE TABLE "bool" (id BOOL PRIMARY KEY)
> INSERT INTO "bool" VALUES (TRUE), (FALSE)
---
ok

[plan]> SELECT * FROM "bool" WHERE id = TRUE
---
KeyLookup: bool (TRUE)
TRUE

[plan]> SELECT * FROM "bool" WHERE id = FALSE
---
KeyLookup: bool (FALSE)
FALSE

# Integer lookups, including a missing value.
> CREATE TABLE "int" (id INT PRIMARY KEY)
> INSERT INTO "int" VALUES (-1), (0), (1)
---
ok

[plan]> SELECT * FROM "int" WHERE id = -1
---
KeyLookup: int (-1)
-1

[plan]> SELECT * FROM "int" WHERE id = 0
---
KeyLookup: int (0)
0

[plan]> SELECT * FROM "int" WHERE id = 1
---
KeyLookup: int (1)
1

[plan]> SELECT * FROM "int" WHERE id = 7
---
KeyLookup: int (7)

# Floats. NAN matches fail (and aren't valid primary keys anyway).
# 0.0 and -0.0 should be considered equal.
> CREATE TABLE "float" (id FLOAT PRIMARY KEY)
> INSERT INTO "float" VALUES (-2.718), (-0.0), (3.14), (INFINITY)

[plan]> SELECT * FROM "float" WHERE id = -2.718
---
KeyLookup: float (-2.718)
-2.718

[plan]> SELECT * FROM "float" WHERE id = -0.0
---
KeyLookup: float (-0.0)
0.0

[plan]> SELECT * FROM "float" WHERE id = 0.0
---
KeyLookup: float (0.0)
0.0

[plan]> SELECT * FROM "float" WHERE id = 3.14
---
KeyLookup: float (3.14)
3.14

[plan]> SELECT * FROM "float" WHERE id = INFINITY
---
KeyLookup: float (inf)
inf

[plan]> SELECT * FROM "float" WHERE id = NAN
---
Nothing

[plan]> SELECT * FROM "float" WHERE id IS NAN
---
KeyLookup: float (NaN)

# Strings. Should be case-insensitive.
> CREATE TABLE "string" (id STRING PRIMARY KEY)
> INSERT INTO "string" VALUES (''), ('a'), ('친'), ('abc'), ('ABC'), ('游녨')

[plan]> SELECT * FROM "string" WHERE id = ''
---
KeyLookup: string ('')
''

[plan]> SELECT * FROM "string" WHERE id = 'a'
---
KeyLookup: string ('a')
'a'

[plan]> SELECT * FROM "string" WHERE id = '친'
---
KeyLookup: string ('친')
'친'

[plan]> SELECT * FROM "string" WHERE id = 'abc'
---
KeyLookup: string ('abc')
'abc'

[plan]> SELECT * FROM "string" WHERE id = '游녨'
---
KeyLookup: string ('游녨')
'游녨'

# LIKE does not use an index.
[plan]> SELECT * FROM "string" WHERE id LIKE 'a%'
---
Scan: string (string.id LIKE 'a%')
'a'
'abc'

# NULL lookups should be legal but give no matches.
[plan]> SELECT * FROM "int" WHERE id = NULL
---
Nothing

[plan]> SELECT * FROM "int" WHERE id IS NULL
---
KeyLookup: int (NULL)

# Multiple lookups work.
[plan]> SELECT * FROM "int" WHERE id = -1 OR id = 0 OR id = 1 OR id = 7
---
KeyLookup: int (-1, 0, 1, 7)
-1
0
1

# > or < predicates don't use an index.
[plan]> SELECT * FROM "int" WHERE id < 1
---
Scan: int (int.id < 1)
-1
0

[plan]> SELECT * FROM "int" WHERE id > -1
---
Scan: int (int.id > -1)
0
1
