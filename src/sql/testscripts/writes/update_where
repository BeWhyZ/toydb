# Tests UPDATE with WHERE predicates.

# Create a table with some data.
> CREATE TABLE name (id INT PRIMARY KEY, value STRING, "index" INT INDEX)
> INSERT INTO name VALUES (1, 'a', 1), (2, 'b', 2), (3, 'c', NULL);
---
ok

# Boolean filters work, and are trivial.
> BEGIN
[plan]> UPDATE name SET value = 'foo' WHERE TRUE
> SELECT * FROM name
> ROLLBACK
---
Update: name (value='foo')
└─ Scan: name
1, 'foo', 1
2, 'foo', 2
3, 'foo', NULL

[plan]> UPDATE name SET value = 'foo' WHERE FALSE
> SELECT * FROM name
---
Update: name (value='foo')
└─ Nothing
1, 'a', 1
2, 'b', 2
3, 'c', NULL

# Updating by primary key lookup.
> BEGIN
[plan]> UPDATE name SET value = 'foo' WHERE id = 1 OR id = 3
> SELECT * FROM name
> ROLLBACK
---
Update: name (value='foo')
└─ KeyLookup: name (1, 3)
1, 'foo', 1
2, 'b', 2
3, 'foo', NULL

# Updating by index lookup.
> BEGIN
[plan]> UPDATE name SET value = 'foo' WHERE "index" = 2
> SELECT * FROM name
> ROLLBACK
---
Update: name (value='foo')
└─ IndexLookup: name.index (2)
1, 'a', 1
2, 'foo', 2
3, 'c', NULL

# Including IS NULL.
> BEGIN
[plan]> UPDATE name SET value = 'foo' WHERE "index" IS NULL
> SELECT * FROM name
> ROLLBACK
---
Update: name (value='foo')
└─ IndexLookup: name.index (NULL)
1, 'a', 1
2, 'b', 2
3, 'foo', NULL

# Updating by arbitrary predicate over full scan.
> BEGIN
[plan]> UPDATE name SET value = 'foo' WHERE id >= 5 - 2 OR (value LIKE 'a') IS NULL
> SELECT * FROM name
> ROLLBACK
---
Update: name (value='foo')
└─ Scan: name (name.id > 3 OR name.id = 3 OR name.value LIKE 'a' IS NULL)
1, 'a', 1
2, 'b', 2
3, 'foo', NULL

# Non-boolean predicates error, except NULL which is equivalent to FALSE.
!> UPDATE name SET value = 'foo' WHERE 0
!> UPDATE name SET value = 'foo' WHERE 1
!> UPDATE name SET value = 'foo' WHERE 3.14
!> UPDATE name SET value = 'foo' WHERE NaN
!> UPDATE name SET value = 'foo' WHERE ''
!> UPDATE name SET value = 'foo' WHERE 'true
---
Error: invalid input: filter returned 0, expected boolean
Error: invalid input: filter returned 1, expected boolean
Error: invalid input: filter returned 3.14, expected boolean
Error: invalid input: filter returned NaN, expected boolean
Error: invalid input: filter returned '', expected boolean
Error: invalid input: unexpected end of string literal

> UPDATE name SET value = 'foo' WHERE NULL
> SELECT * FROM name
---
1, 'a', 1
2, 'b', 2
3, 'c', NULL

# Bare WHERE errors.
!> UPDATE name SET value = 'foo' WHERE
---
Error: invalid input: unexpected end of input

# Missing column errors.
!> UPDATE name SET value = 'foo' WHERE missing = 'foo'
---
Error: invalid input: unknown column missing
