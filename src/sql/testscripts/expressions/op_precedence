# Tests operator precedence. Test each precedence level against the operators
# beside and immediately below it, in order. The levels are:
#
# 10: prefix +, -
# 9: postfix !
# 8: ^ (left-associative)
# 7: *, /, %
# 6: +, -
# 5: >, >=, <, <=
# 4: =, !=, LIKE, IS
# 3: NOT
# 2: AND
# 1: OR
#
# Only ^ is left-associative (and postfix operators by definition).

# Parenthesis can boost a low precedence operator (e.g. addition) above the
# highest precedence (e.g. prefix/postfix and ^).
> 1 + 2 ^ 2
> (1 + 2) ^ 2
> -1 + 2
> -(1 + 2)
> 2 + 3!
> (2 + 3)!
---
5
9
1
-3
8
120

# Prefix -.
> -3 ^ 2
> -(3 ^ 2)
---
9
-9

# Postfix !.
> 2 ^ 3!
> (2 ^ 3)!
---
64
40320

# ^, which is also left-associative.
> 2 ^ 3 ^ 2
> (2 ^ 3) ^ 2
> 2 ^ 3 * 4
> 2 ^ (3 * 4)
> 2 ^ 4 / 2
> 2 ^ (4 / 2)
> 2 ^ 5 % 2
> 2 ^ (5 % 2)
---
512
64
32
4096
8
4
0
2

# *
> 3 * 4 / 2
> 3 * (4 / 2)
> 3 * 4 % 3
> 3 * (4 % 3)
> 1 + 2 * 3
> (1 + 2) * 3
> 1 - 2 * 3
> (1 - 2) * 3
---
6
6
0
3
7
9
-5
-3

# /
> 4 / 2 * 3
> 4 / (2 * 3)
> 8 / 4 % 3
> 8 / (4 % 3)
> 2 + 4 / 2
> (2 + 4) / 2
> 4 - 2 / 2
> (4 - 2) / 2
---
6
0
2
8
4
3
3
1

# %
> 4 % 3 * 3
> 4 % (3 * 3)
> 8 % 3 / 2
> 8 % (3 / 2)
> 2 + 4 % 3
> (2 + 4) % 3
> 8 - 5 % 3
> (8 - 5) % 3
---
3
4
1
0
3
0
6
0

# +
> 1 + 2 - 3
> 1 + (2 - 3)
> 1 + 2 > 2
!> 1 + (2 > 2)
> 1 + 2 >= 2
!> 1 + (2 >= 2)
> 1 + 2 < 2
!> 1 + (2 < 2)
> 1 + 2 <= 2
!> 1 + (2 <= 2)
---
0
0
TRUE
Error: invalid input: can't add 1 and FALSE
TRUE
Error: invalid input: can't add 1 and TRUE
FALSE
Error: invalid input: can't add 1 and FALSE
FALSE
Error: invalid input: can't add 1 and TRUE

# -
> 3 - 2 + 1
> 3 - (2 + 1)
> 2 - 1 > 2
!> 2 - (1 > 2)
> 2 - 1 >= 2
!> 2 - (1 >= 2)
> 2 - 1 < 2
!> 2 - (1 < 2)
> 2 - 1 <= 2
!> 2 - (1 <= 2)
---
2
0
FALSE
Error: invalid input: can't subtract 2 and FALSE
FALSE
Error: invalid input: can't subtract 2 and FALSE
TRUE
Error: invalid input: can't subtract 2 and TRUE
TRUE
Error: invalid input: can't subtract 2 and TRUE

# >
> 5 > 3 < TRUE
!> 5 > (3 < TRUE)
> 5 > 3 <= TRUE
!> 5 > (3 <= TRUE)
> 5 > 3 > TRUE
!> 5 > (3 > TRUE)
> 5 > 3 >= TRUE
!> 5 > (3 >= TRUE)
> 5 > 3 = TRUE
!> 5 > (3 = TRUE)
> 5 > 3 != TRUE
!> 5 > (3 != TRUE)
!> 5 > 3 LIKE 'abc'
!> 5 > (3 LIKE 'abc')
> 5 > 3 IS NULL
!> 5 > (3 IS NULL)
---
FALSE
Error: invalid input: can't compare 3 and TRUE
TRUE
Error: invalid input: can't compare 3 and TRUE
FALSE
Error: invalid input: can't compare 3 and TRUE
TRUE
Error: invalid input: can't compare 3 and TRUE
TRUE
Error: invalid input: can't compare 3 and TRUE
FALSE
Error: invalid input: can't compare 3 and TRUE
Error: invalid input: can't LIKE TRUE and 'abc'
Error: invalid input: can't LIKE 3 and 'abc'
FALSE
Error: invalid input: can't compare 5 and FALSE

# >=
> 5 >= 3 < TRUE
!> 5 >= (3 < TRUE)
> 5 >= 3 <= TRUE
!> 5 >= (3 <= TRUE)
> 5 >= 3 > TRUE
!> 5 >= (3 > TRUE)
> 5 >= 3 >= TRUE
!> 5 >= (3 >= TRUE)
> 5 >= 3 = TRUE
!> 5 >= (3 = TRUE)
> 5 >= 3 != TRUE
!> 5 >= (3 != TRUE)
!> 5 >= 3 LIKE 'abc'
!> 5 >= (3 LIKE 'abc')
> 5 >= 3 IS NULL
!> 5 >= (3 IS NULL)
---
FALSE
Error: invalid input: can't compare 3 and TRUE
TRUE
Error: invalid input: can't compare 3 and TRUE
FALSE
Error: invalid input: can't compare 3 and TRUE
TRUE
Error: invalid input: can't compare 3 and TRUE
TRUE
Error: invalid input: can't compare 3 and TRUE
FALSE
Error: invalid input: can't compare 3 and TRUE
Error: invalid input: can't LIKE TRUE and 'abc'
Error: invalid input: can't LIKE 3 and 'abc'
FALSE
Error: invalid input: can't compare 5 and FALSE

# <
> 5 < 3 < TRUE
!> 5 < (3 < TRUE)
> 5 < 3 <= TRUE
!> 5 < (3 <= TRUE)
> 5 < 3 > TRUE
!> 5 < (3 > TRUE)
> 5 < 3 >= TRUE
!> 5 < (3 >= TRUE)
> 5 < 3 = TRUE
!> 5 < (3 = TRUE)
> 5 < 3 != TRUE
!> 5 < (3 != TRUE)
!> 5 < 3 LIKE 'abc'
!> 5 < (3 LIKE 'abc')
> 5 < 3 IS NULL
!> 5 < (3 IS NULL)
---
TRUE
Error: invalid input: can't compare 3 and TRUE
TRUE
Error: invalid input: can't compare 3 and TRUE
FALSE
Error: invalid input: can't compare 3 and TRUE
FALSE
Error: invalid input: can't compare 3 and TRUE
FALSE
Error: invalid input: can't compare 3 and TRUE
TRUE
Error: invalid input: can't compare 3 and TRUE
Error: invalid input: can't LIKE FALSE and 'abc'
Error: invalid input: can't LIKE 3 and 'abc'
FALSE
Error: invalid input: can't compare 5 and FALSE

# <=
> 5 <= 3 < TRUE
!> 5 <= (3 < TRUE)
> 5 <= 3 <= TRUE
!> 5 <= (3 <= TRUE)
> 5 <= 3 > TRUE
!> 5 <= (3 > TRUE)
> 5 <= 3 >= TRUE
!> 5 <= (3 >= TRUE)
> 5 <= 3 = TRUE
!> 5 <= (3 = TRUE)
> 5 <= 3 != TRUE
!> 5 <= (3 != TRUE)
!> 5 <= 3 LIKE 'abc'
!> 5 <= (3 LIKE 'abc')
> 5 <= 3 IS NULL
!> 5 <= (3 IS NULL)
---
TRUE
Error: invalid input: can't compare 3 and TRUE
TRUE
Error: invalid input: can't compare 3 and TRUE
FALSE
Error: invalid input: can't compare 3 and TRUE
FALSE
Error: invalid input: can't compare 3 and TRUE
FALSE
Error: invalid input: can't compare 3 and TRUE
TRUE
Error: invalid input: can't compare 3 and TRUE
Error: invalid input: can't LIKE FALSE and 'abc'
Error: invalid input: can't LIKE 3 and 'abc'
FALSE
Error: invalid input: can't compare 5 and FALSE

# =
> 1 = 1 != FALSE
!> 1 = (1 != FALSE)
!> 1 = 1 LIKE 'abc'
!> 1 = (1 LIKE 'abc')
> 1 = NULL IS NULL
!> 1 = (NULL IS NULL)
> NOT 1 = 1
!> (NOT 1) = 1
---
TRUE
Error: invalid input: can't compare 1 and FALSE
Error: invalid input: can't LIKE TRUE and 'abc'
Error: invalid input: can't LIKE 1 and 'abc'
TRUE
Error: invalid input: can't compare 1 and TRUE
FALSE
Error: invalid input: can't NOT 1

# !=
> 1 != 1 != FALSE
!> 1 != (1 != FALSE)
!> 1 != 1 LIKE 'abc'
!> 1 != (1 LIKE 'abc')
> 1 != NULL IS NULL
!> 1 != (NULL IS NULL)
> NOT 1 != 1
!> (NOT 1) != 1
---
FALSE
Error: invalid input: can't compare 1 and FALSE
Error: invalid input: can't LIKE FALSE and 'abc'
Error: invalid input: can't LIKE 1 and 'abc'
TRUE
Error: invalid input: can't compare 1 and TRUE
TRUE
Error: invalid input: can't NOT 1

# LIKE
> 'abc' LIKE NULL IS NULL
!> 'abc' LIKE (NULL IS NULL)
> NOT 'abc' LIKE 'abc'
!> (NOT 'abc') LIKE 'abc'
---
TRUE
Error: invalid input: can't LIKE 'abc' and TRUE
FALSE
Error: invalid input: can't NOT 'abc'

# IS NULL
> NOT NULL IS NULL
> (NOT NULL) IS NULL
---
FALSE
TRUE

# IS NOT NULL
> NOT NULL IS NOT NULL
> (NOT NULL) IS NOT NULL
---
TRUE
FALSE

# IS NAN
> NOT NAN IS NAN
!> (NOT NAN) IS NAN
---
FALSE
Error: invalid input: can't NOT NaN

# IS NOT NAN
> NOT NAN IS NOT NAN
!> (NOT NAN) IS NOT NAN
---
TRUE
Error: invalid input: can't NOT NaN

# NOT.
> NOT TRUE AND FALSE
> NOT (TRUE AND FALSE)
---
FALSE
TRUE

# AND
> FALSE AND TRUE OR TRUE
> FALSE AND (TRUE OR TRUE)
> TRUE OR TRUE AND FALSE
> (TRUE OR TRUE) AND FALSE
---
TRUE
FALSE
TRUE
FALSE

# OR has the lowest precedence, so nothing to test.
