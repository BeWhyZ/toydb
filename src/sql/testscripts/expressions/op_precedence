# Tests operator precedence. Test each precedence level against the operators
# beside and immediately below it, in order. The levels are:
#
# 10: prefix +, -
# 9: postfix !
# 8: ^ (left-associative)
# 7: *, /, %
# 6: +, -
# 5: >, >=, <, <=
# 4: =, !=, LIKE, IS
# 3: NOT
# 2: AND
# 1: OR
#
# Only ^ is left-associative (and postfix operators by definition).

# Parenthesis can boost a low precedence operator (e.g. addition) above the
# highest precedence (e.g. prefix/postfix and ^).
> 1 + 2 ^ 2
> (1 + 2) ^ 2
> -1 + 2
> -(1 + 2)
> 2 + 3!
> (2 + 3)!
---
Integer(5)
Integer(9)
Integer(1)
Integer(-3)
Integer(8)
Integer(120)

# Prefix -.
> -3 ^ 2
> -(3 ^ 2)
---
Integer(9)
Integer(-9)

# Postfix !.
> 2 ^ 3!
> (2 ^ 3)!
---
Integer(64)
Integer(40320)

# ^, which is also left-associative.
> 2 ^ 3 ^ 2
> (2 ^ 3) ^ 2
> 2 ^ 3 * 4
> 2 ^ (3 * 4)
> 2 ^ 4 / 2
> 2 ^ (4 / 2)
> 2 ^ 5 % 2
> 2 ^ (5 % 2)
---
Integer(512)
Integer(64)
Integer(32)
Integer(4096)
Integer(8)
Integer(4)
Integer(0)
Integer(2)

# *
> 3 * 4 / 2
> 3 * (4 / 2)
> 3 * 4 % 3
> 3 * (4 % 3)
> 1 + 2 * 3
> (1 + 2) * 3
> 1 - 2 * 3
> (1 - 2) * 3
---
Integer(6)
Integer(6)
Integer(0)
Integer(3)
Integer(7)
Integer(9)
Integer(-5)
Integer(-3)

# /
> 4 / 2 * 3
> 4 / (2 * 3)
> 8 / 4 % 3
> 8 / (4 % 3)
> 2 + 4 / 2
> (2 + 4) / 2
> 4 - 2 / 2
> (4 - 2) / 2
---
Integer(6)
Integer(0)
Integer(2)
Integer(8)
Integer(4)
Integer(3)
Integer(3)
Integer(1)

# %
> 4 % 3 * 3
> 4 % (3 * 3)
> 8 % 3 / 2
> 8 % (3 / 2)
> 2 + 4 % 3
> (2 + 4) % 3
> 8 - 5 % 3
> (8 - 5) % 3
---
Integer(3)
Integer(4)
Integer(1)
Integer(0)
Integer(3)
Integer(0)
Integer(6)
Integer(0)

# +
> 1 + 2 - 3
> 1 + (2 - 3)
> 1 + 2 > 2
!> 1 + (2 > 2)
> 1 + 2 >= 2
!> 1 + (2 >= 2)
> 1 + 2 < 2
!> 1 + (2 < 2)
> 1 + 2 <= 2
!> 1 + (2 <= 2)
---
Integer(0)
Integer(0)
Boolean(true)
Error: invalid input: can't add 1 and FALSE
Boolean(true)
Error: invalid input: can't add 1 and TRUE
Boolean(false)
Error: invalid input: can't add 1 and FALSE
Boolean(false)
Error: invalid input: can't add 1 and TRUE

# -
> 3 - 2 + 1
> 3 - (2 + 1)
> 2 - 1 > 2
!> 2 - (1 > 2)
> 2 - 1 >= 2
!> 2 - (1 >= 2)
> 2 - 1 < 2
!> 2 - (1 < 2)
> 2 - 1 <= 2
!> 2 - (1 <= 2)
---
Integer(2)
Integer(0)
Boolean(false)
Error: invalid input: can't subtract 2 and FALSE
Boolean(false)
Error: invalid input: can't subtract 2 and FALSE
Boolean(true)
Error: invalid input: can't subtract 2 and TRUE
Boolean(true)
Error: invalid input: can't subtract 2 and TRUE

# >
> 5 > 3 < TRUE
!> 5 > (3 < TRUE)
> 5 > 3 <= TRUE
!> 5 > (3 <= TRUE)
> 5 > 3 > TRUE
!> 5 > (3 > TRUE)
> 5 > 3 >= TRUE
!> 5 > (3 >= TRUE)
> 5 > 3 = TRUE
!> 5 > (3 = TRUE)
> 5 > 3 != TRUE
!> 5 > (3 != TRUE)
!> 5 > 3 LIKE 'abc'
!> 5 > (3 LIKE 'abc')
> 5 > 3 IS NULL
!> 5 > (3 IS NULL)
---
Boolean(false)
Error: invalid input: can't compare 3 and TRUE
Boolean(true)
Error: invalid input: can't compare 3 and TRUE
Boolean(false)
Error: invalid input: can't compare 3 and TRUE
Boolean(true)
Error: invalid input: can't compare 3 and TRUE
Boolean(true)
Error: invalid input: can't compare 3 and TRUE
Boolean(false)
Error: invalid input: can't compare 3 and TRUE
Error: invalid input: can't LIKE TRUE and abc
Error: invalid input: can't LIKE 3 and abc
Boolean(false)
Error: invalid input: can't compare 5 and FALSE

# >=
> 5 >= 3 < TRUE
!> 5 >= (3 < TRUE)
> 5 >= 3 <= TRUE
!> 5 >= (3 <= TRUE)
> 5 >= 3 > TRUE
!> 5 >= (3 > TRUE)
> 5 >= 3 >= TRUE
!> 5 >= (3 >= TRUE)
> 5 >= 3 = TRUE
!> 5 >= (3 = TRUE)
> 5 >= 3 != TRUE
!> 5 >= (3 != TRUE)
!> 5 >= 3 LIKE 'abc'
!> 5 >= (3 LIKE 'abc')
> 5 >= 3 IS NULL
!> 5 >= (3 IS NULL)
---
Boolean(false)
Error: invalid input: can't compare 3 and TRUE
Boolean(true)
Error: invalid input: can't compare 3 and TRUE
Boolean(false)
Error: invalid input: can't compare 3 and TRUE
Boolean(true)
Error: invalid input: can't compare 3 and TRUE
Boolean(true)
Error: invalid input: can't compare 3 and TRUE
Boolean(false)
Error: invalid input: can't compare 3 and TRUE
Error: invalid input: can't LIKE TRUE and abc
Error: invalid input: can't LIKE 3 and abc
Boolean(false)
Error: invalid input: can't compare 5 and FALSE

# <
> 5 < 3 < TRUE
!> 5 < (3 < TRUE)
> 5 < 3 <= TRUE
!> 5 < (3 <= TRUE)
> 5 < 3 > TRUE
!> 5 < (3 > TRUE)
> 5 < 3 >= TRUE
!> 5 < (3 >= TRUE)
> 5 < 3 = TRUE
!> 5 < (3 = TRUE)
> 5 < 3 != TRUE
!> 5 < (3 != TRUE)
!> 5 < 3 LIKE 'abc'
!> 5 < (3 LIKE 'abc')
> 5 < 3 IS NULL
!> 5 < (3 IS NULL)
---
Boolean(true)
Error: invalid input: can't compare 3 and TRUE
Boolean(true)
Error: invalid input: can't compare 3 and TRUE
Boolean(false)
Error: invalid input: can't compare 3 and TRUE
Boolean(false)
Error: invalid input: can't compare 3 and TRUE
Boolean(false)
Error: invalid input: can't compare 3 and TRUE
Boolean(true)
Error: invalid input: can't compare 3 and TRUE
Error: invalid input: can't LIKE FALSE and abc
Error: invalid input: can't LIKE 3 and abc
Boolean(false)
Error: invalid input: can't compare 5 and FALSE

# <=
> 5 <= 3 < TRUE
!> 5 <= (3 < TRUE)
> 5 <= 3 <= TRUE
!> 5 <= (3 <= TRUE)
> 5 <= 3 > TRUE
!> 5 <= (3 > TRUE)
> 5 <= 3 >= TRUE
!> 5 <= (3 >= TRUE)
> 5 <= 3 = TRUE
!> 5 <= (3 = TRUE)
> 5 <= 3 != TRUE
!> 5 <= (3 != TRUE)
!> 5 <= 3 LIKE 'abc'
!> 5 <= (3 LIKE 'abc')
> 5 <= 3 IS NULL
!> 5 <= (3 IS NULL)
---
Boolean(true)
Error: invalid input: can't compare 3 and TRUE
Boolean(true)
Error: invalid input: can't compare 3 and TRUE
Boolean(false)
Error: invalid input: can't compare 3 and TRUE
Boolean(false)
Error: invalid input: can't compare 3 and TRUE
Boolean(false)
Error: invalid input: can't compare 3 and TRUE
Boolean(true)
Error: invalid input: can't compare 3 and TRUE
Error: invalid input: can't LIKE FALSE and abc
Error: invalid input: can't LIKE 3 and abc
Boolean(false)
Error: invalid input: can't compare 5 and FALSE

# =
> 1 = 1 != FALSE
!> 1 = (1 != FALSE)
!> 1 = 1 LIKE 'abc'
!> 1 = (1 LIKE 'abc')
> 1 = NULL IS NULL
!> 1 = (NULL IS NULL)
> NOT 1 = 1
!> (NOT 1) = 1
---
Boolean(true)
Error: invalid input: can't compare 1 and FALSE
Error: invalid input: can't LIKE TRUE and abc
Error: invalid input: can't LIKE 1 and abc
Boolean(true)
Error: invalid input: can't compare 1 and TRUE
Boolean(false)
Error: invalid input: can't negate 1

# !=
> 1 != 1 != FALSE
!> 1 != (1 != FALSE)
!> 1 != 1 LIKE 'abc'
!> 1 != (1 LIKE 'abc')
> 1 != NULL IS NULL
!> 1 != (NULL IS NULL)
> NOT 1 != 1
!> (NOT 1) != 1
---
Boolean(false)
Error: invalid input: can't compare 1 and FALSE
Error: invalid input: can't LIKE FALSE and abc
Error: invalid input: can't LIKE 1 and abc
Boolean(true)
Error: invalid input: can't compare 1 and TRUE
Boolean(true)
Error: invalid input: can't negate 1

# LIKE
> 'abc' LIKE NULL IS NULL
!> 'abc' LIKE (NULL IS NULL)
> NOT 'abc' LIKE 'abc'
!> (NOT 'abc') LIKE 'abc'
---
Boolean(true)
Error: invalid input: can't LIKE abc and TRUE
Boolean(false)
Error: invalid input: can't negate abc

# IS NULL
> NOT NULL IS NULL
> (NOT NULL) IS NULL
---
Boolean(false)
Boolean(true)

# IS NOT NULL
> NOT NULL IS NOT NULL
> (NOT NULL) IS NOT NULL
---
Boolean(true)
Boolean(false)

# IS NAN
> NOT NAN IS NAN
!> (NOT NAN) IS NAN
---
Boolean(false)
Error: invalid input: can't negate NaN

# IS NOT NAN
> NOT NAN IS NOT NAN
!> (NOT NAN) IS NOT NAN
---
Boolean(true)
Error: invalid input: can't negate NaN

# NOT.
> NOT TRUE AND FALSE
> NOT (TRUE AND FALSE)
---
Boolean(false)
Boolean(true)

# AND
> FALSE AND TRUE OR TRUE
> FALSE AND (TRUE OR TRUE)
> TRUE OR TRUE AND FALSE
> (TRUE OR TRUE) AND FALSE
---
Boolean(true)
Boolean(false)
Boolean(true)
Boolean(false)

# OR has the lowest precedence, so nothing to test.
