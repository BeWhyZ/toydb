# Tests parsing and evaluation of literals and constants.

# Boolean and float constants.
true
false
null
infinity
nan
---
TRUE
FALSE
NULL
inf
NaN

# Constants are case-insensitive.
NULL
NaN
---
NULL
NaN

# Integers.
3
314
03
---
3
314
3

# Floats with decimal points.
3.72
3.
3.0
---
3.72
3.0
3.0

# Negative or explicit positive numbers are parsed as prefix operators.
[expr]> -3
[expr]> +3
[expr]> -3.14
[expr]> +3.14
---
-3 ← Negate(Constant(Integer(3)))
3 ← Identity(Constant(Integer(3)))
-3.14 ← Negate(Constant(Float(3.14)))
3.14 ← Identity(Constant(Float(3.14)))

# Floats with exponents.
3.14e3
2.718E-2
---
3140.0
0.02718

# Integer overflow/underflow.
>  9223372036854775807
!> 9223372036854775808
>  -9223372036854775807
!> -9223372036854775808
---
9223372036854775807
Error: invalid input: number too large to fit in target type
-9223372036854775807
Error: invalid input: number too large to fit in target type

# Float overflow/underflow.
> 1.23456789012345e308
> 1e309
> -1.23456789012345e308
> -1e309
---
1.23456789012345e308
inf
-1.23456789012345e308
-inf

# Float precision.
> 1.23456789012345e-307
> -1.23456789012345e-307
> 1.23456789012345e-323
> 0.12345678901234567890
> 1e-325
---
1.23456789012345e-307
-1.23456789012345e-307
1e-323
0.12345678901234568
0.0

# Strings, using single quotes. Only '' is supported as an escape sequence.
> 'Hi! 👋'
> 'Has ''single'' and "double" quotes'
> 'Try \n newlines and \t tabs'
---
'Hi! 👋'
'Has \'single\' and \"double\" quotes'
'Try \\n newlines and \\t tabs'

# Double quotes are identifiers, not string literals. This fails to evaluate as
# a constant expression.
!> "Hi!"
---
Error: invalid input: expression must be constant, found column Hi!
