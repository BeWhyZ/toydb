# Tests the constant folding optimizer.

> CREATE TABLE test (id INT PRIMARY KEY, value STRING)
> INSERT INTO test VALUES (1, 'a'), (2, 'b'), (3, 'c')
---
ok

# Constant folding is applied in all places where expressions are used.
[opt]> SELECT 1+1
---
Initial:
   Projection: 1 + 1
   └─ Values: blank row
ConstantFolding:
   Projection: 2
   └─ Values: blank row
2

[opt]> SELECT 1+1 FROM test
---
Initial:
   Projection: 1 + 1
   └─ Scan: test
ConstantFolding:
   Projection: 2
   └─ Scan: test
2
2
2

[opt]> SELECT * FROM test a JOIN test b ON 1+1 > 1
---
Initial:
   NestedLoopJoin: inner on 1 + 1 > 1
   ├─ Scan: test as a
   └─ Scan: test as b
ConstantFolding:
   NestedLoopJoin: inner on TRUE
   ├─ Scan: test as a
   └─ Scan: test as b
FilterPushdown:
   NestedLoopJoin: inner
   ├─ Scan: test as a (TRUE)
   └─ Scan: test as b (TRUE)
ShortCircuit:
   NestedLoopJoin: inner
   ├─ Scan: test as a
   └─ Scan: test as b
1, 'a', 1, 'a'
1, 'a', 2, 'b'
1, 'a', 3, 'c'
2, 'b', 1, 'a'
2, 'b', 2, 'b'
2, 'b', 3, 'c'
3, 'c', 1, 'a'
3, 'c', 2, 'b'
3, 'c', 3, 'c'

[opt]> SELECT * FROM test WHERE 1+1 > 1
---
Initial:
   Filter: 1 + 1 > 1
   └─ Scan: test
ConstantFolding:
   Filter: TRUE
   └─ Scan: test
FilterPushdown:
   Scan: test (TRUE)
ShortCircuit:
   Scan: test
1, 'a'
2, 'b'
3, 'c'

[opt]> SELECT * FROM test ORDER BY 1+1
---
Initial:
   Order: 1 + 1 asc
   └─ Scan: test
ConstantFolding:
   Order: 2 asc
   └─ Scan: test
1, 'a'
2, 'b'
3, 'c'

[opt]> SELECT * FROM test LIMIT 1+1
---
Initial:
   Limit: 2
   └─ Scan: test
1, 'a'
2, 'b'

[opt]> SELECT * FROM test OFFSET 1+1
---
Initial:
   Offset: 2
   └─ Scan: test
3, 'c'

# Constant folding folds the constant parts of a variable expression.
# TODO: this should fold 4 - 6, but it needs to reorder operations.
[opt]> SELECT 2 * 2 + id - 3 * 2 FROM test
---
Initial:
   Projection: 2 * 2 + test.id - 3 * 2
   └─ Scan: test
ConstantFolding:
   Projection: 4 + test.id - 6
   └─ Scan: test
-1
0
1

# Constant folding short-circuits variable logical operations.
[opt]> SELECT * FROM test WHERE 1+1 > 1 OR id > 1
---
Initial:
   Filter: 1 + 1 > 1 OR test.id > 1
   └─ Scan: test
ConstantFolding:
   Filter: TRUE
   └─ Scan: test
FilterPushdown:
   Scan: test (TRUE)
ShortCircuit:
   Scan: test
1, 'a'
2, 'b'
3, 'c'

[opt]> SELECT * FROM test WHERE 1+1 < 1 OR id > 1
---
Initial:
   Filter: 1 + 1 < 1 OR test.id > 1
   └─ Scan: test
ConstantFolding:
   Filter: test.id > 1
   └─ Scan: test
FilterPushdown:
   Scan: test (test.id > 1)
2, 'b'
3, 'c'

[opt]> SELECT * FROM test WHERE 1+1 > 1 AND id > 1
---
Initial:
   Filter: 1 + 1 > 1 AND test.id > 1
   └─ Scan: test
ConstantFolding:
   Filter: test.id > 1
   └─ Scan: test
FilterPushdown:
   Scan: test (test.id > 1)
2, 'b'
3, 'c'

[opt]> SELECT * FROM test WHERE 1+1 < 1 AND id > 1
---
Initial:
   Filter: 1 + 1 < 1 AND test.id > 1
   └─ Scan: test
ConstantFolding:
   Filter: FALSE
   └─ Scan: test
FilterPushdown:
   Scan: test (FALSE)
ShortCircuit:
   Nothing
