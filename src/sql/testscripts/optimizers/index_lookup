# Tests the index_lookup optimizer.

> CREATE TABLE test (id INT PRIMARY KEY, value STRING INDEX, "float" FLOAT INDEX)
> INSERT INTO test VALUES (0, NULL), (1, 'a', 3.14), (2, 'b', NAN), (3, 'c', 0.0)
> CREATE TABLE other (id INT PRIMARY KEY, test_id INT REFERENCES test)
> INSERT INTO other VALUES (1, 1), (2, 2), (3, 3)
---
ok

# Primary key lookups.
[opt]> SELECT * FROM test WHERE id = 2
---
Initial:
   Filter: test.id = 2
   └─ Scan: test
FilterPushdown:
   Scan: test (test.id = 2)
IndexLookup:
   KeyLookup: test (2)
2, 'b', NaN

[opt]> SELECT * FROM test WHERE id = 1 OR id = 3
---
Initial:
   Filter: test.id = 1 OR test.id = 3
   └─ Scan: test
FilterPushdown:
   Scan: test (test.id = 1 OR test.id = 3)
IndexLookup:
   KeyLookup: test (1, 3)
1, 'a', 3.14
3, 'c', 0.0

# Can combine lookups with other predicates, but only AND.
[opt]> SELECT * FROM test WHERE (id = 1 OR id = 3) AND value > 'a'
---
Initial:
   Filter: (test.id = 1 OR test.id = 3) AND test.value > 'a'
   └─ Scan: test
FilterPushdown:
   Scan: test ((test.id = 1 OR test.id = 3) AND test.value > 'a')
IndexLookup:
   Filter: test.value > 'a'
   └─ KeyLookup: test (1, 3)
3, 'c', 0.0

[opt]> SELECT * FROM test WHERE id = 1 OR id = 3 OR value > 'a'
---
Initial:
   Filter: test.id = 1 OR test.id = 3 OR test.value > 'a'
   └─ Scan: test
FilterPushdown:
   Scan: test (test.id = 1 OR test.id = 3 OR test.value > 'a')
1, 'a', 3.14
2, 'b', NaN
3, 'c', 0.0

# Same story with secondary indexes.
[opt]> SELECT * FROM test WHERE value = 'b'
---
Initial:
   Filter: test.value = 'b'
   └─ Scan: test
FilterPushdown:
   Scan: test (test.value = 'b')
IndexLookup:
   IndexLookup: test.value ('b')
2, 'b', NaN

[opt]> SELECT * FROM test WHERE value = 'a' OR value = 'c'
---
Initial:
   Filter: test.value = 'a' OR test.value = 'c'
   └─ Scan: test
FilterPushdown:
   Scan: test (test.value = 'a' OR test.value = 'c')
IndexLookup:
   IndexLookup: test.value ('a', 'c')
1, 'a', 3.14
3, 'c', 0.0

[opt]> SELECT * FROM test WHERE (value = 'a' OR value = 'c') AND id > 1
---
Initial:
   Filter: (test.value = 'a' OR test.value = 'c') AND test.id > 1
   └─ Scan: test
FilterPushdown:
   Scan: test ((test.value = 'a' OR test.value = 'c') AND test.id > 1)
IndexLookup:
   Filter: test.id > 1
   └─ IndexLookup: test.value ('a', 'c')
3, 'c', 0.0

[opt]> SELECT * FROM test WHERE value = 'a' OR value = 'c' OR id > 1
---
Initial:
   Filter: test.value = 'a' OR test.value = 'c' OR test.id > 1
   └─ Scan: test
FilterPushdown:
   Scan: test (test.value = 'a' OR test.value = 'c' OR test.id > 1)
1, 'a', 3.14
2, 'b', NaN
3, 'c', 0.0

# NULL lookups should match for IS NULL, but not for = NULL. IS NOT NULL
# incurs a table scan.
[opt]> SELECT * FROM test WHERE value IS NULL
---
Initial:
   Filter: test.value IS NULL
   └─ Scan: test
FilterPushdown:
   Scan: test (test.value IS NULL)
IndexLookup:
   IndexLookup: test.value (NULL)
0, NULL, NULL

[opt]> SELECT * FROM test WHERE value = NULL
---
Initial:
   Filter: test.value = NULL
   └─ Scan: test
FilterPushdown:
   Scan: test (test.value = NULL)
IndexLookup:
   IndexLookup: test.value (0 values)
ShortCircuit:
   Nothing

[opt]> SELECT * FROM test WHERE value != NULL
---
Initial:
   Filter: NOT test.value = NULL
   └─ Scan: test
FilterPushdown:
   Scan: test (NOT test.value = NULL)

[opt]> SELECT * FROM test WHERE value IS NOT NULL
---
Initial:
   Filter: NOT test.value IS NULL
   └─ Scan: test
FilterPushdown:
   Scan: test (NOT test.value IS NULL)
1, 'a', 3.14
2, 'b', NaN
3, 'c', 0.0

# NAN lookups should be treated similarly to NULLs.
[opt]> SELECT * FROM test WHERE "float" IS NAN
---
Initial:
   Filter: test.float IS NAN
   └─ Scan: test
FilterPushdown:
   Scan: test (test.float IS NAN)
IndexLookup:
   IndexLookup: test.float (NaN)
2, 'b', NaN

[opt]> SELECT * FROM test WHERE "float" = NAN
---
Initial:
   Filter: test.float = NaN
   └─ Scan: test
FilterPushdown:
   Scan: test (test.float = NaN)
IndexLookup:
   IndexLookup: test.float (0 values)
ShortCircuit:
   Nothing

[opt]> SELECT * FROM test WHERE "float" = -NAN
---
Initial:
   Filter: test.float = -NaN
   └─ Scan: test
ConstantFolding:
   Filter: test.float = NaN
   └─ Scan: test
FilterPushdown:
   Scan: test (test.float = NaN)
IndexLookup:
   IndexLookup: test.float (0 values)
ShortCircuit:
   Nothing

# NB: NAN != NAN, so this should return row 2. This is unlike NULL, where NULL
# != NULL yields NULL rather than true.
[opt]> SELECT * FROM test WHERE "float" != NAN
---
Initial:
   Filter: NOT test.float = NaN
   └─ Scan: test
FilterPushdown:
   Scan: test (NOT test.float = NaN)
1, 'a', 3.14
2, 'b', NaN
3, 'c', 0.0

[opt]> SELECT * FROM test WHERE "float" IS NOT NAN
---
Initial:
   Filter: NOT test.float IS NAN
   └─ Scan: test
FilterPushdown:
   Scan: test (NOT test.float IS NAN)
1, 'a', 3.14
3, 'c', 0.0

# Inner joins on foreign keys with index lookups are transferred across.
[opt]> SELECT * FROM test JOIN other ON other.test_id = test.id WHERE test_id = 1 OR test_id = 3
---
Initial:
   Filter: other.test_id = 1 OR other.test_id = 3
   └─ NestedLoopJoin: inner on other.test_id = test.id
      ├─ Scan: test
      └─ Scan: other
FilterPushdown:
   NestedLoopJoin: inner on other.test_id = test.id
   ├─ Scan: test (test.id = 1 OR test.id = 3)
   └─ Scan: other (other.test_id = 1 OR other.test_id = 3)
IndexLookup:
   NestedLoopJoin: inner on other.test_id = test.id
   ├─ KeyLookup: test (1, 3)
   └─ IndexLookup: other.test_id (1, 3)
HashJoin:
   HashJoin: inner on test.id = other.test_id
   ├─ KeyLookup: test (1, 3)
   └─ IndexLookup: other.test_id (1, 3)
1, 'a', 3.14, 1, 1
3, 'c', 0.0, 3, 3

# It's the same if the index lookups are given in the join predicate.
[opt]> SELECT * FROM test JOIN other ON other.test_id = test.id AND (test_id = 1 OR test_id = 3)
---
Initial:
   NestedLoopJoin: inner on other.test_id = test.id AND (other.test_id = 1 OR other.test_id = 3)
   ├─ Scan: test
   └─ Scan: other
FilterPushdown:
   NestedLoopJoin: inner on other.test_id = test.id
   ├─ Scan: test (test.id = 1 OR test.id = 3)
   └─ Scan: other (other.test_id = 1 OR other.test_id = 3)
IndexLookup:
   NestedLoopJoin: inner on other.test_id = test.id
   ├─ KeyLookup: test (1, 3)
   └─ IndexLookup: other.test_id (1, 3)
HashJoin:
   HashJoin: inner on test.id = other.test_id
   ├─ KeyLookup: test (1, 3)
   └─ IndexLookup: other.test_id (1, 3)
1, 'a', 3.14, 1, 1
3, 'c', 0.0, 3, 3

# It also works with three tables.
[opt]> SELECT * FROM test \
    JOIN other a ON a.test_id = test.id AND a.test_id = 2 \
    JOIN other b ON b.test_id = test.id AND b.test_id = 1 OR b.test_id = 3
---
Initial:
   NestedLoopJoin: inner on b.test_id = test.id AND b.test_id = 1 OR b.test_id = 3
   ├─ NestedLoopJoin: inner on a.test_id = test.id AND a.test_id = 2
   │  ├─ Scan: test
   │  └─ Scan: other as a
   └─ Scan: other as b
FilterPushdown:
   NestedLoopJoin: inner on b.test_id = test.id OR b.test_id = 3
   ├─ NestedLoopJoin: inner on a.test_id = test.id
   │  ├─ Scan: test (test.id = 2)
   │  └─ Scan: other as a (a.test_id = 2)
   └─ Scan: other as b (b.test_id = 1 OR b.test_id = 3)
IndexLookup:
   NestedLoopJoin: inner on b.test_id = test.id OR b.test_id = 3
   ├─ NestedLoopJoin: inner on a.test_id = test.id
   │  ├─ KeyLookup: test (2)
   │  └─ IndexLookup: other.test_id as a.test_id (2)
   └─ IndexLookup: other.test_id as b.test_id (1, 3)
HashJoin:
   NestedLoopJoin: inner on b.test_id = test.id OR b.test_id = 3
   ├─ HashJoin: inner on test.id = a.test_id
   │  ├─ KeyLookup: test (2)
   │  └─ IndexLookup: other.test_id as a.test_id (2)
   └─ IndexLookup: other.test_id as b.test_id (1, 3)
2, 'b', NaN, 2, 2, 3, 3
