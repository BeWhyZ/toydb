# Tests transaction anomalies. This is also tested at the MVCC and SQL
# levels, but we may as well have an end-to-end test for them.
#
# Uses a single script to avoid cluster startup times for each test.

cluster nodes=5
---
ok

> CREATE TABLE test (id INT PRIMARY KEY, value STRING)
---
ok

# Dirty read: when c2 can read an uncommitted value written by c1. Snapshot
# isolation prevents this.
c1:> BEGIN
c1:> INSERT INTO test VALUES (1, 'a')
---
ok

c2:> BEGIN
c2:> SELECT * FROM test WHERE id = 1
---
ok

c1:> ROLLBACK
c2:> ROLLBACK
---
ok

# Dirty write: when c2 overwrites an uncommitted value written by c1. Snapshot
# isolation prevents this.

c1:> BEGIN
c1:> INSERT INTO test VALUES (1, 'a')
---
ok

c2:> BEGIN
c2:!> INSERT INTO test VALUES (1, 'a')
---
c2: Error: serialization failure, retry transaction

c1:> ROLLBACK
c2:> ROLLBACK
---
ok

# Fuzzy (or unrepeatable) read: when c2 sees a value change after c1 updates it.
# Snapshot isolation prevents this.

> INSERT INTO test VALUES (1, 'a')
---
ok

c1:> BEGIN
c2:> BEGIN
---
ok

c2:> SELECT * FROM test WHERE id = 1
---
c2: 1, 'a'

c1:> UPDATE test SET value = 'b' WHERE id = 1
c1:> COMMIT
c1:> SELECT * FROM test
---
c1: 1, 'b'

c2:> SELECT * FROM test WHERE id = 1
---
c2: 1, 'a'

c2:> ROLLBACK
> DELETE FROM test
---
ok

# Lost update: when c1 and c2 both read a value and update it, where c2's update
# replaces c1. Snapshot isolation prevents this.

c1:> BEGIN
c1:> SELECT * FROM test WHERE id = 1
---
ok

c2:> BEGIN
c2:> SELECT * FROM test WHERE id = 1
---
ok

c1:> INSERT INTO test VALUES (1, 'a')
c1:> COMMIT
---
ok

c2:!> INSERT INTO test VALUES (1, 'a')
---
c2: Error: serialization failure, retry transaction

c2:> ROLLBACK
> DELETE FROM test
---
ok

# Phantom read: when c1 reads entries matching some predicate, but a
# modification by c2 changes which entries match the predicate such that a later
# read by c1 returns them. Snapshot isolation prevents this.

> INSERT INTO test VALUES (1, 'a'), (2, 'b'), (3, 'c')
---
ok

c1:> BEGIN
c2:> BEGIN
---
ok

c1:> SELECT * FROM test WHERE id > 1
---
c1: 2, 'b'
c1: 3, 'c'

c2:> DELETE FROM test WHERE id = 2
c2:> INSERT INTO test VALUES (4, 'd')
c2:> COMMIT
---
ok

c1:> SELECT * FROM test WHERE id > 1
---
c1: 2, 'b'
c1: 3, 'c'

c1:> ROLLBACK
> DELETE FROM test
---
ok

# Read skew: when c1 reads a and b, but c2 modifies b in between the reads.
# Snapshot isolation prevents this.

> INSERT INTO test VALUES (1, 'a'), (2, 'b')
---
ok

c1:> BEGIN
c2:> BEGIN
---
ok

c1:> SELECT * FROM test WHERE id = 1
---
c1: 1, 'a'

c2:> UPDATE test SET value = 'b' WHERE id = 1
c2:> UPDATE test SET value = 'a' WHERE id = 2
c2:> COMMIT
---
ok

c1:> SELECT * FROM test WHERE id = 2
---
c1: 2, 'b'

c1:> ROLLBACK
> DELETE FROM test
---
ok

# Write skew: when c1 reads a and writes it to b while c2 reads b and writes it
# to a. Snapshot isolation does not prevent this, which is expected, so we
# assert the anomalous behavior. Fixing this would require implementing
# serializable snapshot isolation.

> INSERT INTO test VALUES (1, 'a'), (2, 'b')
---
ok

c1:> BEGIN
c2:> BEGIN
---
ok

c1:> SELECT * FROM test WHERE id = 1
c2:> SELECT * FROM test WHERE id = 2
---
c1: 1, 'a'
c2: 2, 'b'

c1:> UPDATE test SET value = 'a' WHERE id = 2
c2:> UPDATE test SET value = 'b' WHERE id = 1
---
ok

c1:> COMMIT
c2:> COMMIT
---
ok

> SELECT * FROM test
---
1, 'b'
2, 'a'
